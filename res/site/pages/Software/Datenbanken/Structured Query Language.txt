# 4. Structured Query Language
> SQL

SQL bezeichnet eine Sprache für die Kommunikation mit relationalen Datenbanken, mit denen Daten aus diesen ausgelesen werden können.
Sie zeichnet sich durch ihre einfach gehaltene Syntax aus und besteht im Wesentlichen aus englischen Sprachelementen. Eine fertige SQL Anfrage lässt die
Datenbank eine Tabelle generieren, die sie dann zurückgibt.<br>
Allgemein kann eine SQL-Abfrage aus folgenden Teilen bestehen:
- `SELECT`
- `FROM`
- `WHERE`
- `GROUP BY`
- `HAVING`
- `ORDER BY`

## Projektion
Mit `SELECT` werden die Spalten ausgewählt, die später einmal im Ergebnis angezeigt werden. Dies wird <b>Projektion</b> genannt,
da bestimmte Tabellenspalten ausgewählt werden. Dabei sind folgende Parameter zugelassen:
- Tabellenspaltennamen
- `*`   ( = alle Spalten )
- [Aggregatfunktionen|Structured Query Language|Aggregatfunktionen]

Es gibt einen weiteren Parameter, der angegeben werden kann: `DISTINCT`. Mit diesem werden nur Einträge im Ergebnis zugelassen,
wenn sie nicht schon mal vorkommen, heißt, jedes Ergebnis taucht nur ein mal auf.<br>
`SELECT *`<br>
`SELECT Spalte`<br>
`SELECT DISTINCT Spalte, AndereSpalte`<br><br>

Nun müssen allerdings noch die Tabellen angegeben werden, von denen die Daten geholt werden sollen. Dies passiert mit `FROM`,
welches auch zu der <b>Projektion</b> gehört. Hierbei werden einfach alle benötigten Tabellen hinter das `FROM` geschrieben:<br>
`SELECT Spalte FROM Tabelle`<br>
`SELECT Spalte, AndereSpalte FROM Tabelle, AndereTabelle`<br>
Wenn mal eine Spalte in zwei verschiedenen Tabellen unter dem gleichen Namen vorkommt, so muss bei der Spaltenauswahl die Tabelle mit angegeben werden:<br>
`SELECT Tabelle1.Spalte, Tabelle2.Spalte FROM Tabelle1, Tabelle2`<br><br>

Mit FROM können allerdings auch sogenannte `JOIN`s erstellt werden. Ein `JOIN` verbindet zwei separate Tabellen zu einer großen unter Berücksichtigung von
bestimmten Bedingungen (`ON`). Man geht allgemein von zwei Tabellen aus, der linken und der rechten. Es gibt verschiedene Arten, diese beiden Tabellen dann zu verbinden:
img pages/image71.png

Ein `INNER JOIN` erstellt eine neue Tabelle, in denen nur diejenigen Einträge vorhanden sind, die in beiden Tabellen vorhanden sind.<br>
Ein `LEFT` / `RIGHT JOIN` nimmt alle Einträge der linken / rechten Tabelle und nur diejenigen aus der jeweils anderen, die zu den anderen Datensätzen passen.<br>
Ein `FULL JOIN` verbindet alle möglichen Kombinationen mit zueinander passenden Datensätzen und kann möglicherweise eine sehr große Tabelle generieren.<br><br>

Ein JOIN in SQL sieht so aus:<br>
`SELECT *`<br>
`FROM Bestellungen INNER JOIN Kunden ON Bestellungen.KundenID = Kunden.KundenID`<br>
`WHERE Kunden.Name LIKE "T%";`<br>
Diese Abfrage im Speziellen vereint die Tabellen `Bestellungen` (links) und `Kunden` (rechts) dort, wo die `KundenID` gleich ist.
Danach sortiert er aber alle Kunden aus, deren Namen nicht mit einem T beginnen (später mehr dazu).<br>
Wenn mehr als zwei Tabellen vereint werden sollen, so kann mit geschickter Klammersetzung das Ergebnis des ersten `JOIN`s als linke oder rechte
Tabelle für den zweiten `JOIN` dienen.

## Selektion
Mit den anderen Anweisungen werden aus den Spalten die Zeilen ausgewählt, darum nennt sich dieser Schritt <b>Selektion</b>.
Mit `WHERE` können, wie auch schon im Beispiel oben, Zeilen heraussortiert werden, die einer bestimmten Bedingung entsprechen.
Der Bedingungsausdruck, der diese Auswahl trifft, kann aus folgenden Operatoren bestehen:
<table class="tg">
<thead>
  <tr>
    <th class="tg-0pky">Arithmetische</th>
    <th class="tg-0pky">Vergleich</th>
    <th class="tg-0lax">Selektion</th>
    <th class="tg-0lax">Logische</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-0pky">`+` (plus)</td>
    <td class="tg-0pky">`=` (gleich)</td>
    <td class="tg-0lax">`IN` / `NOT IN` (muss / darf nicht in Menge liegen)</td>
    <td class="tg-0lax">`AND` (beide Bed. müssen erfüllt sein)</td>
  </tr>
  <tr>
    <td class="tg-0pky">`-` (minus)</td>
    <td class="tg-0pky">`&lt;&gt;` (ungleich)</td>
    <td class="tg-0lax">`BETWEEN` / `NOT BETWEEN … AND …` (Wert innerhalb / außerhalb von Bereich)</td>
    <td class="tg-0lax">`OR` (eine der beiden Bed. muss erfüllt sein)</td>
  </tr>
  <tr>
    <td class="tg-0lax">`*` (mal)</td>
    <td class="tg-0lax">`&gt;` (größer)</td>
    <td class="tg-0lax">`LIKE` / NOT` LIKE` (Vergleichsmuster)</td>
    <td class="tg-0lax">`NOT` (Bed. darf nicht erfüllt sein)</td>
  </tr>
  <tr>
    <td class="tg-0lax">`/` (geteilt)</td>
    <td class="tg-0lax">`&lt;` (kleiner)</td>
    <td class="tg-0lax">`IS NULL` / `IS NOT NULL` (leer/nicht leer)</td>
    <td class="tg-0lax"></td>
  </tr>
  <tr>
    <td class="tg-0lax">`%` (modulo)</td>
    <td class="tg-0lax">`&gt;=` (größer gleich)</td>
    <td class="tg-0lax"></td>
    <td class="tg-0lax"></td>
  </tr>
  <tr>
    <td class="tg-0lax"></td>
    <td class="tg-0lax">`&lt;=` (kleiner gleich)</td>
    <td class="tg-0lax"></td>
    <td class="tg-0lax"></td>
  </tr>
</tbody>
</table>

Wenn ein Text verglichen werden soll, muss `LIKE` verwendet werden. Hierbei können sogenannte „Wild Cards” verwendet werden,
welche als Joker innerhalb eines Textes dienen:
<table class="tg">
<tbody>
  <tr>
    <td class="tg-0lax">`%` `*`</td>
    <td class="tg-0lax">beliebig viele Zeichen (0..n)</td>
    <td class="tg-0lax">`bl%`</td>
    <td class="tg-0lax">bl, black, blue &amp; blob</td>
  </tr>
  <tr>
    <td class="tg-0lax">`_` `?`</td>
    <td class="tg-0lax">ein einzelnes Zeichen</td>
    <td class="tg-0lax">`h_t`</td>
    <td class="tg-0lax">hot, hat &amp; hit</td>
  </tr>
  <tr>
    <td class="tg-0lax">`#`</td>
    <td class="tg-0lax">eine Ziffer</td>
    <td class="tg-0lax">`2#5`</td>
    <td class="tg-0lax">205, 215, ...</td>
  </tr>
  <tr>
    <td class="tg-0lax">`\[\]`</td>
    <td class="tg-0lax">Zeichen innerhalb der Klammern</td>
    <td class="tg-0lax">`h\[oa\]t`</td>
    <td class="tg-0lax">hot &amp; hat, aber nicht hit</td>
  </tr>
  <tr>
    <td class="tg-0lax">`\[\^!\]`</td>
    <td class="tg-0lax">Zeichen nicht in den Klammern</td>
    <td class="tg-0lax">`h\[\^oa\]t`</td>
    <td class="tg-0lax">hit, aber nicht hot und hat</td>
  </tr>
  <tr>
    <td class="tg-0lax">`[-]`</td>
    <td class="tg-0lax">Eine Reihe an Zeichen</td>
    <td class="tg-0lax">`c\[a-b\]t`</td>
    <td class="tg-0lax">cat &amp; cbt</td>
  </tr>
</tbody>
</table>
Manchmal gibt es mehrere verschiedene, die das gleiche tun.<br><br>

Einige Beispiele für `WHERE`:<br>
`SELECT * FROM Teilnehmer WHERE TeilnehmerNr = 3;`<br>
`SELECT VName FROM Teilnehmer WHERE VName LIKE "T?m";`<br>
`SELECT PName FROM Projekt WHERE VName IS NOT NULL AND Datum BETWEEN #1/1/1968# AND #1/1/1988#;`<br>
`SELECT * FROM Projekt WHERE NOT (PName LIKE "c[a-z]t*" OR AnzTeilnehmer > 100);`<br>
`SELECT * FROM Kunden WHERE Land IN (SELECT Land FROM Anbieter);`<br><br>

## Aggregatfunktionen
[Aggregatfunktionen] (auch Spaltenfunktionen) fassen die Werte einer gesamten Spalte zu einem kombinierten (aggregierten) Wert zusammen.
- `COUNT` Zählt die Zeilen, deren Werte nicht `NULL` sind
- `AVG` durchschnittlicher Wert
- `MAX` größter Wert
- `MIN` kleinster Wert
- `SUM` Summe (alle Werte addiert)

Bei `SELECT` dürfen, wenn Aggregatfunktionen in der Ergebnistabelle vorkommen, keine anderen Spalten außer Aggregatfunktionen und Spalten,
nach denen gruppiert wurde, angegeben werden. Das heißt, das hier wäre möglich:<br>
`SELECT COUNT(*), AVG(Preis) FROM Bestellung;`<br>
Das hier allerdings nicht:<br>
`SELECT SUM(Stunden), NutzerID FROM Arbeitszeit;`<br><br>

Bei Aggregatfunktionen ist es sinnvoll, die Spalten umzubenennen, da es ansonsten nicht immer klar ist, um was es sich in der Spalte handelt. Dies geschieht mit einem `AS`.
Tabellennamen können ebenfalls umbenannt werden, indem einfach der neue Name hinter den eigentlichen Namen geschrieben wird.<br>
`SELECT SUM(Be.Preis) AS Gesamtpreis FROM Bestellung Be;`<br>

## Gruppenfunktionen
Gruppenfunktionen werden mit `GROUP BY` angekündigt.
- `GROUP BY` bewirkt eine Teilmengenbildung der Tabelle entsprechend des angegebenen Attributs nachdem `FROM` und `WHERE` verarbeitet wurden, damit auch nach den `JOIN`s
- Aggregatfunktionen werden später auf jede Gruppe einzeln angewandt. So können später auch alle Spalten in `SELECT` genannt werden, nach denen gruppiert wurde
Mit `HAVING` können dann Bedingungen auf diese einzelnen Gruppen angewandt werden. Der Unterschied zwischen `HAVING` und `WHERE`:
- `WHERE` eliminiert einzelne Zeilen
- `HAVING` eliminiert einzelne Gruppen
Ein Beispiel:<br>
`SELECT ProduktID, SUM(Menge) AS Gesamtmenge, AVG(Menge) AS DurchschnMenge`<br>
`FROM Bestellungen`<br>
`GROUP BY ProduktID`<br>
`HAVING AVG(Menge) < 12;`<br>
Hier wird zunächst nach der `ProduktID` gruppiert. Dann werden alle Gruppen ausgeschlossen, die mehr als 12 mal im Durchschnitt gekauft werden,
um diese dann mit ihrer `ProduktID`, der Summe der gekauften Menge und der Durchschnittsmenge anzuzeigen.<br>

## Sortieren
Nun bleibt nur noch die `ORDER BY`-Anweisung. Diese sortiert das Ergebnis der SQL-Abfrage noch einmal alphabetisch, bzw. nach Größe der Zahl.
Mit `ASC` und `DESC` lässt sich zudem festlegen, ob das Ergebnis auf- oder absteigend sortiert werden soll. Es können auch mehrere Spalten je mit
`ASC` oder `DESC` angegeben werden, je mit einem `,` getrennt.<br>
`SELECT * FROM Kunden ORDER BY KundenName DESC, KundenID ASC;`

## Bearbeitungsreihenfolge
Zuletzt noch ein Blick auf die Reihenfolge, in der die Datenbank die SQL-Anfrage bearbeitet:
~ `FROM` Zunächst werden alle hier aufgeführten Tabellen in eine Hilfstabelle geladen
~ `WHERE` Alle Zeilen, die der Bedingung entsprechen, werden hier in eine Zwischentabelle zusammengefasst
~ `GROUP BY` Auf der Basis der Gruppierungsattribute werden die Zeilen mit gleichen Attributen zusammengefasst
~ `HAVING` Gruppen aus dem `GROUP BY`-Ergebnis werden nach der `HAVING`-Bedingung ausgewählt
~ `SELECT` Erst jetzt wird ausgewählt, welche Spalten in dem endgültigen Ergebnis angezeigt werden sollen
~ `ORDER BY` Ändert nur noch die Reihenfolge der Zeilen im Endergebnis
