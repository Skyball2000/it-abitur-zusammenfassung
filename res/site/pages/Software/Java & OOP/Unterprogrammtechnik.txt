# 6. Unterprogrammtechnik

Unterprogramme dienen dazu, Programmcode übersichtlicher und weniger repetitiv zu machen, indem Teile eines Programms in besagte Unterprogramme ausgelagert werden.<br>
Hier sind einige Eigenschaften von Unterprogrammen:
- Strukturieren und Organisieren von Programmcode
- Abstrahieren und Verallgemeinern von Prozessen
- einzelne Komponenten sind Austauschbar
- Wiederverwenden von Code
<br>

Doch was sind Unterprogramme? Unterprogramme können Code enthalten und diesen Ausführen, wenn das Unterprogramm aufgerufen wird. Man stelle sich vor, man hat ein
Programm, das eine gewisse Menge an immer gleichem Code an verschiedenen Stellen ausführen:
````Java
public static void main(String\[\] args) {
    int x = 23;
    <b>x = x + 4;</b>
    <b>if (x < 54)</b>
        <b>x = 34;</b>
    System.out.println(x);
    x = 67;
    <b>x = x + 4;</b>
    <b>if (x < 54)</b>
        <b>x = 34;</b>
    System.out.println(x);
}
````
Hier müsste man den selben Code zwei mal hinschreiben, was eher umständlich ist. Zudem müsste man wenn man das Stück Code ändern möchte, es zwei mal bearbeiten.<br>
Die Lösung dazu sind Unterprogramme:
````Java
public static void main(String\[\] args) {
    int x = 23;
    System.out.println(<b>eineFunktion(x)</b>);
    x = 67;
    System.out.println(<b>eineFunktion(x)</b>);
}
&nbsp;
public int eineFunktion(int einParameter) {
    <b>einParameter = einParameter + 4;</b>
    <b>if (einParameter < 54)</b>
        <b>einParameter = 34;</b>
    return einParameter;
}
````
Und voilà, sehr viel eleganter. Der doppelt vorkommende Code wurde in ein anderes Unterprogramm verschoben. Doch was genau ist da jetzt passiert? Schauen wir uns das genauer an.

## Erstellen eines Unterprogramms
Es gibt bei einem Unterprogramm einmal die <b>Definition</b> und einmal die <b>Aufrufe</b> des Unterprogramms. Sagen wir, wir haben ein Unterprogramm `gibAus` was ein eindimensionales Feld ausgeben soll:
````Java
public void gibAus(String\[\] meinFeld) {
    for (int i = 0; i < meinFeld.length; i++) {
        System.out.println(meinFeld\[i\]);
    }
}
````
Dies ist die <b>Definition</b> des Unterprogramms. In ihm wird definiert, was passieren soll, wenn das Unterprogramm aufgerufen wird. Die erste Zeile des Unterprogramms,
also `public void gibAus(String\[\] meinFeld)` in diesem Fall, nennt sich <b>Signatur</b>. Die Signatur des Unterprogramms gibt relativ viele Informationen:
<table class="tg">
<thead>
  <tr>
    <th class="tg-0lax">Name</th>
    <th class="tg-0lax">Erklärung</th>
    <th class="tg-0lax">Mögliche Werte</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-0lax">Sichtbarkeit</td>
    <td class="tg-0lax">Die Sichtbarkeit beschreibt, von wo aus das Unterprogramm aus aufgerufen werden kann.<br>`public` macht, dass jeder, der auf ein Objekt der Klasse zugriff hat, darauf zugreifen kann.<br>`private` bedeutet, dass nur das Objekt selbst es aufrufen kann.<br>`protected` heißt, dass nur das Objekt selbst und davon erbende Klassen es aufrufen können.<br></td>
    <td class="tg-0lax">`public`<br>`private`<br>`protected`</td>
  </tr>
  <tr>
    <td class="tg-0lax">[Rückgabetyp]</td>
    <td class="tg-0lax">Jedes Unterprogramm kann einem einen Wert zurückgeben, nachdem es ausgeführt wurde. Der Rückgabetyp beschreibt den Typ des Wertes, der zurückgegeben werden soll.<br>Wenn ein Unterprogramm keinen Wert zurückgeben soll, muss als Rückgabetyp `void` verwendet werden. Wenn aber etwas anderes da steht, z.B. `String`, dann muss auch ein Wert von diesem Typ zurückgegeben werden. Dies passiert mit `return`.<br></td>
    <td class="tg-0lax">`void`<br>`String`<br>`int`<br>...</td>
  </tr>
  <tr>
    <td class="tg-0lax">Name</td>
    <td class="tg-0lax">Schlicht gesagt: Der Name des Unterprogramms. Für ihn gelten die gleichen Regeln wie für [Variablen|Elementare Sprachelemente in Java|Wie sollte man seine Variablen benennen]. Dieser wird später auch beim Unterprogrammaufruf verwendet.<br><br></td>
    <td class="tg-0lax">`meinUnterprogramm`<br>`gibAus`<br>`berechneWerte`<br>...</td>
  </tr>
  <tr>
    <td class="tg-0lax">Parameterliste</td>
    <td class="tg-0lax">Eine beliebig lange Liste an Werten, die dem Unterprogramm beim Aufruf mitgegeben werden müssen. Die einzelnen Parameter werden durch `,` getrennt und haben zuerst den Typ und dann den Bezeichner. Sie stehen in den Klammern des Unterprogramms.</td>
    <td class="tg-0lax">`String text, int wert`</td>
  </tr>
</tbody>
</table>

Also, das Unterprogramm `public void gibAus(String\[\] meinFeld)` von oben hat die Sichtbarkeit `public` (kann also von überall aus aufgerufen werden), gibt keinen Wert
zurück (`void`) und nimmt einen Parameter, ein String Array (`String\[\]`), das es dann `meinFeld` nennt. Hier die einzelnen Teile im Detail:

## Parameter
Ein Parameter eines Unterprogramms ist das, was man beim Unterprogrammaufruf mitgeben kann. Hier ein Beispiel:
````Java
public static void main(String\[\] args) {
    printCombined(<i>1, "Thomas"</i>);

    int meineID = 2;
    String name = "Yan";
    printCombined(<i>meineID, name</i>);
}

public void printCombined(<i>int id, String username</i>) {
    System.out.println("(" + id + ") " + username);
}
````
Wenn man in dem Beispiel die `main` ausführen würde, würde `(1) Thomas` und `(2) Yan` ausgegeben werden. Warum?<br>
Das Unterprogramm `printCombined` nimmt zwei Parameter an: einen integer (`id`) und einen Text (`username`). Der erste Unterprogrammaufruf `printCombined(1, "Thomas");`
nimmt direkt als Parameter an: `1, "Thomas"`. Diese Werte werden dann den Variablen `id` und `username` unten im Unterprogramm eingesetzt. Das heißt, `id = 1` und
`username = "Thomas"`. Sobald das Unterprogramm fertig abgelaufen ist, kehrt das Programm zum Aufruf zurück.
<br>Als nächstes haben wir zwei Variablen `meineID` und `name`. Ihnen sind die Werte `2` und `"Yan"` zugeordnet. Das heißt, hier werden dann die Werte der Variablen
als Parameter mitgegeben und es wird im Unterprogramm `(2) Yan` ausgegeben.<br><br>

Parameter sind also nichts anderes als Werte, die beim Aufruf an das Unterprogramm übergeben werden können.<br>
Bei der Parameterübergabe gibt es allerdings zwei unterschiedliche Fälle: Call by value und call by reference. Diese beiden wurden bereits bei den
[Feldern|Felder|Doch was bedeutet es] angedeutet.<br><br>

<b>Call by value</b><br>
Bei call by value wird ein <b>Wert</b> als Parameter an das Unterprogramm übergeben. Dies trifft auf alle primitiven Datentypen zu, also alle, die klein geschrieben werden
(`int`, `char`). Hierbei wird also der Wert kopiert und diese Kopie des Wertes an das Unterprogramm übergeben.<br><br>
Wenn also in diesem Beispiel `meinWert` mit dem Wert von `10` an `doStuff` übergeben wird, so wird eine Kopie des Wertes `10` erstellt und in die Variable `meinParameter`
gepackt. Wenn diese Kopie (`meinParameter`) verändert wird, bleibt das original (`meinWert`) unverändert.
````Java
public static void main(String\[\] args) {
    int meinWert = 10;
    doStuff(<i>meinWert</i>);
}

public void doStuff(<i>int meinParameter</i>) {
    System.out.println(meinParameter);
}
````
img pages/call by value.png
Wie im Bild zu sehen ist, wurde der Wert an eine andere Adresse im Speicher kopiert und beide Variablen haben somit eine eigene Kopie des Wertes.

<br><br><b>[Call by reference]</b><br>
Bei call by Reference wird nicht der Wert der angegebenen Variable mitgegeben, sondern die <i>Referenz</i>, also ein Zeiger, zum eigentlichen Wert mitgegeben. Hier sind
das alle restlichen Typen, also Objekte und Felder.<br>
Bei dem Übergebenen Wert handelt es sich also tatsächlich um den <i>exakt gleichen Wert</i>, nicht bloß eine Kopie davon. Wenn man den Wert der Variable dann im
Unterprogramm verändert, so verändert sich auch der originale Wert der originalen Variable.
````Java
public static void main(String\[\] args) {
    int\[\] meinFeld = {10, 24, 8, 93, 861, 200};
    doStuff(<i>meinFeld</i>);
    System.out.println(meinFeld\[0\]);
}

public void doStuff(<i>int\[\] meinParameter</i>) {
    meinParameter\[0\] = 453;
    System.out.println(meinParameter\[0\]);
}
````
In diesem Beispiel wird ein Feld `int\[\] meinFeld` mitgegeben (also kein primitiver Datentyp). Es wird hierbei also keine Kopie angefertigt, es ist noch immer das
<i>gleiche</i> Feld wie oben. Wenn es also dort verändert wird: `meinParameter\[0\] = 453`, dann wird es auch oben verändert und der Wert bei `0` ist nicht mehr `10`,
sondern `453`. Es würde also zwei mal `453` ausgegeben werden.<br>
img pages/call by reference.png
Es handelt sich um ein und dasselbe <i>Objekt</i>.

## Rückgabewerte
Ein Unterprogramm kann einem auch Werte zurückgeben. Dieser wird, wie [oben|Unterprogrammtechnik|Rückgabetyp] beschrieben, ebenfalls in der Signatur des Unterprogramms angegeben.
Wenn man nicht möchte, dass das Unterprogramm einem einen Wert zurückgibt, muss man als Rückgabetyp `void` angeben.<br><br>

Zurückgegeben wird in einem Unterprogramm mit `return ...;`, wobei der zurückzugebende Wert hinter dem `return` angegeben wird. Sobald das Unterprogramm auf ein `return` stößt,
verlässt es sofort das Unterprogramm, es ist also immer das letzte, was man in einem Unterprogramm tut. Der angegebene Wert muss von dem Typ sein, der oben in der Signatur des
Unterprogramms angegeben ist, ansonsten gibt es einen Kompilierfehler.<br><br>
Es kann auch mehrere `return`-Anweisungen im Programm geben:
````Java
public static void main(String\[\] args) {
    System.out.println(<i>berechne(12, 2)</i>);
    System.out.println(<i>berechne(3, 8)</i>);
    System.out.println(<i>berechne(20, 34)</i>);
}

public <i>int</i> berechne(int a, int b) {
    a = a * 2;
    if (a < 10)
        <i>return a * (b + 2);</i>
    else if (b < 10)
        <i>return a * (b - 2);</i>
    <i>return a + b;</i>
}
````
In diesem Beispiel würde `0`, `60` und `74` ausgegeben werden. Beim `berechne(12, 2)` verlässt es das Unterprogramm beim zweiten `return`, bei `berechne(3, 8)` beim ersten und bei
`berechne(20, 34)` beim letzten. Wie zu erwarten springt das Programm sobald es auf das `return` stößt zurück zum Unterprogrammaufruf und setzt anstelle des Aufrufs den zurückgegebenen
Wert ein, also steht in `main` eigentlich das hier:
````Java
public static void main(String\[\] args) {
    System.out.println(<i>0</i>);
    System.out.println(<i>60</i>);
    System.out.println(<i>74</i>);
}
````
<br><br>

Basierend auf dem Rückgabewert-Typ wird auch die Namensgebung bestimmt:
- Wenn ein Unterprogramm einen Wert zurückgibt nennt man es <b>Funktion</b>
- Wenn es keinen Wert zurückgibt (also `void`), nennt man es <b>Prozedur</b>


## Formalparameter und Aktualparameter
Je nachdem, ob der Parameter in der Unterprogrammdefinition oder im Aufruf steht, wird er unterschiedlich benannt.<br><br>
Die Parameter in der Definition eines Unterprogramms (also in der Signatur) werden <b>Formalparameter</b> genannt. In diesem Beispiel hier wäre also `String textParameter` ein
Formalparameter, da es sich bei dem Code um eine Unterprogrammdefinition handelt:
````Java
private String doStuff(String textParameter) {
    //...
}
````

<br>Wenn nun das Unterprogramm aufgerufen wird, so werden für die benötigten Parameter konkrete Werte eingesetzt. Das sind dann die <b>Aktualparameter</b>. Die beiden hier
konkreten mitgegebenen Werte sind also Aktualparameter:
````Java
doStuff("Dies ist ein Aktualparameter");
doStuff("Mein Text".substring(1,4));
````

## Aufgaben
$$ Frage 1:Wie werden bei einem Unterprogramm Parameter angegeben?->Lösung
Parameter befinden sich in den Parameterklammern hinter dem Unterprogrammnamen. Sie bestehen je aus dem Parametertyp (`String`, `int`, ...) und dem Parameterbezeichner.
Mehrere Parameter werden von `,` Kommas getrennt.
$$$

$$ Frage 2:Was für mögliche Rückgabewerte gibt es für ein Unterprogramm? Wie nennt man dann je das Unterprogramm?->Lösung
Wenn das Unterprogramm einen Rückgabewert haben soll, dann muss hinter der Sichtbarkeit des Unterprogramms der Rückgabetyp stehen (`double`, `long`, ...).
In diesem Fall nennt man es <i>Funktion</i>.<br>
Wenn es keinen Rückgabewert hat, so muss man den Typ `void` benutzen. Dann nennt man es <i>Prozedur</i>.
$$$

$$ Frage 3:Was ist der Unterschied zwischen call by value und call by reference?->Lösung
Bei primitiven Datentypen wird call by value angewendet und damit der Mitgabewert kopiert.<br><br>
Bei Objekten und Feldern ist es call by reference, was die Referenz zum Objekt kopiert. Damit wird nicht eine Kopie des Objektes mitgegeben, sondern das Objekt selbst.
Wenn nun im Unterprogramm das Objekt verändert wird, so verändert es sich auch in der originalen Variable.
$$$

$$ Frage 4:Im Beispiel oben, was würde `berechne(56, 3)`, `berechne(2, 6)` und `berechne(5, 10)` zurückgeben?->Lösung
112<br>32<br>20
$$$

$$ Frage 5:Erstelle ein Unterprogramm, das einen Text als Parameter erhält und den doppelten Ganzzahlwert zurückgibt. Erstelle drei Aufrufe und deren Rückgaben dafür.->Lösung
````Java
public int doubleNumber(String n) {
    return Integer.parseInt(n) * 2;
}
````
<br><br>Beispiel-Aufrufe:<br>
`doubleNumber("2");` --> 4<br>
`doubleNumber(13 + "2");` --> 264<br>
`doubleNumber("" + doubleNumber("3"));` --> 6<br>
$$$

$$ Frage 6:Extrahiere sinnvoll Unterprogramme aus dem Programm unten:->Lösung
````Java
public static void main(String\[\] args) {
    int\[\] meineWerte = {1, 45, 23, 76, 34};
    gibAus(meineWerte);
    veraendereWerte(meineWerte);
    gibAus(meineWerte);
    veraendereWerte(meineWerte);
    gibAus(meineWerte);
}

public void gibAus(int\[\] feld) {
    for (int i = 0; i < feld.length; i++) {
        System.out.println(feld\[i\]);
    }
}

public void veraendereWerte(int\[\] feld) {
    for (int i = 0; i < feld.length; i++) {
        if (feld\[i\] < 30) {
            feld\[i\] = feld\[i\] / 2;
        } else {
            feld\[i\] = feld\[i\] + 4;
        }
    }
}
````
$$$

````Java
public static void main(String\[\] args) {
    int\[\] meineWerte = {1, 45, 23, 76, 34};
    for (int i = 0; i < meineWerte.length; i++) {
        System.out.println(meineWerte\[i\]);
    }
    for (int i = 0; i < meineWerte.length; i++) {
        if (meineWerte\[i\] < 30) {
            meineWerte\[i\] = meineWerte\[i\] / 2;
        } else {
            meineWerte\[i\] = meineWerte\[i\] + 4;
        }
    }
    for (int i = 0; i < meineWerte.length; i++) {
        System.out.println(meineWerte\[i\]);
    }
    for (int i = 0; i < meineWerte.length; i++) {
        if (meineWerte\[i\] < 30) {
            meineWerte\[i\] = meineWerte\[i\] / 2;
        } else {
            meineWerte\[i\] = meineWerte\[i\] + 4;
        }
    }
    for (int i = 0; i < meineWerte.length; i++) {
        System.out.println(meineWerte\[i\]);
    }
}
````

$$ Frage 7:Liste <i><b>alle</b></i> Aktual-/Formalparameter im Code hier drunter auf:->Lösung
Aktualparameter:<br>
`12`  `34`  `berechne(12, 34)`  `x`  `x + 45`  `berechne(x, x + 45) + 6`

<br><br>
Formalparameter:<br>
`int a`  `int b`  `int ergebnis`
$$$

````Java
public static void main(String\[\] args) {
    gibAus(berechne(12, 34));
    int x = 4;
    gibAus(berechne(x, x + 45) + 6);
}

private int berechne(int a, int b) {
    return a - b * 2;
}

private void gibAus(int ergebnis) {
    System.out.println(ergebnis);
}
````

$$ Frage 8:Denk dir selbst ein Unterprogramm aus, das irgendetwas tut, was sich lohnt auszulagern und du z.B. immer mal wieder gebrauchen könntest!